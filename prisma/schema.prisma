// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Non-Next Auth
  activities Activity[]
  challenges Challenge[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Chalkolate schema
model Grade {
  id        String      @id @default(cuid())
  name      String
  challenge Challenge[]
}

model Technique {
  id          String      @id @default(cuid())
  name        String
  description String?
  challenges  Challenge[]
}

model Gym {
  id   String @id @default(cuid())
  name String

  latitude  Float
  longitude Float

  challenge Challenge[]
  wall      Wall[]
  Activity  Activity[]
}

model Wall {
  id   String @id @default(cuid())
  name String

  gym   Gym    @relation(fields: [gymId], references: [id])
  gymId String

  type String

  schedule RouteChangeSchedule?

  @@index([gymId])
}

model RouteChangeSchedule {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  climbingZone   Wall   @relation(fields: [climbingZoneId], references: [id])
  climbingZoneId String @unique

  schedule_start_date   DateTime
  change_interval_weeks Int
}

model Challenge {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  gym   Gym    @relation(fields: [gymId], references: [id])
  gymId String

  grade   Grade  @relation(fields: [gradeId], references: [id])
  gradeId String

  techniques Technique[]

  startTime DateTime
  endTime   DateTime

  @@index([userId])
  @@index([gymId])
  @@index([gradeId])
}

model Activity {
  id            String   @id @default(cuid())
  activity_date DateTime
  duration      Int?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  gym   Gym    @relation(fields: [gymId], references: [id])
  gymId String

  @@index([userId])
  @@index([gymId])
}
