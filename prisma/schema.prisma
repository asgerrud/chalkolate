// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Non-Next Auth
  activities Activity[]
  challenges Challenge[]
}

/// @@Gen.model(hide: true)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Chalkolate schema

model Grade {
  id        Int         @id @default(autoincrement())
  name      String
  challenge Challenge[]
}

model Location {
  id   String @id @default(cuid())
  name String

  latitude  Float
  longitude Float

  zone      Zone[]
  activity  Activity[]
  challenge Challenge[]
}

model Zone {
  id             String          @id @default(cuid())
  name           String
  type           String
  location       Location        @relation(fields: [locationId], references: [id])
  locationId     String
  changeSchedule ChangeSchedule?
  challenge      Challenge[]

  @@index([locationId])
}

model ChangeSchedule {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  zone   Zone   @relation(fields: [zoneId], references: [id])
  zoneId String @unique

  startDate           DateTime
  changeIntervalWeeks Int
}

model Challenge {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  location   Location @relation(fields: [locationId], references: [id])
  locationId String

  zone   Zone   @relation(fields: [zoneId], references: [id])
  zoneId String

  grade   Grade @relation(fields: [gradeId], references: [id])
  gradeId Int

  startDate DateTime
  endDate   DateTime

  techniques Technique[]

  @@index([userId])
  @@index([zoneId])
  @@index([locationId])
  @@index([gradeId])
}

model Technique {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  Challenge   Challenge[]
}

model Activity {
  id       String   @id @default(cuid())
  date     DateTime
  duration Int?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  location   Location @relation(fields: [locationId], references: [id])
  locationId String

  @@index([userId])
  @@index([locationId])
}
